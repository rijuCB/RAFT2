// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rijuCB/RAFT2/restClient (interfaces: IrestClient)

// Package mock_restClient is a generated GoMock package.
package mock_restClient

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIrestClient is a mock of IrestClient interface.
type MockIrestClient struct {
	ctrl     *gomock.Controller
	recorder *MockIrestClientMockRecorder
}

// MockIrestClientMockRecorder is the mock recorder for MockIrestClient.
type MockIrestClientMockRecorder struct {
	mock *MockIrestClient
}

// NewMockIrestClient creates a new mock instance.
func NewMockIrestClient(ctrl *gomock.Controller) *MockIrestClient {
	mock := &MockIrestClient{ctrl: ctrl}
	mock.recorder = &MockIrestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIrestClient) EXPECT() *MockIrestClientMockRecorder {
	return m.recorder
}

// RequestVoteFromNode mocks base method.
func (m *MockIrestClient) RequestVoteFromNode(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestVoteFromNode", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestVoteFromNode indicates an expected call of RequestVoteFromNode.
func (mr *MockIrestClientMockRecorder) RequestVoteFromNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestVoteFromNode", reflect.TypeOf((*MockIrestClient)(nil).RequestVoteFromNode), arg0)
}

// SendEmptyAppendLogs mocks base method.
func (m *MockIrestClient) SendEmptyAppendLogs(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmptyAppendLogs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmptyAppendLogs indicates an expected call of SendEmptyAppendLogs.
func (mr *MockIrestClientMockRecorder) SendEmptyAppendLogs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmptyAppendLogs", reflect.TypeOf((*MockIrestClient)(nil).SendEmptyAppendLogs), arg0)
}
